@page "/Library"
@using System.Diagnostics.CodeAnalysis
@using System.Net.Http.Headers
@using System.Text
@using System.Text.Encodings.Web
@using System.Text.Json
@using System.Text.Unicode
@using BookSpring.WebApp.Dialogs
@using BookSpring.WebApp.Models
@using Microsoft.AspNetCore.Components.Authorization
@inject HttpClient httpClient
@inject NavigationManager Nav
@inject IDialogService DialogService
@inject AuthenticationStateProvider authStateProvider
@inject ISnackbar Snackbar
@inject IJSRuntime JS

<PageTitle>所有图书 - iLibrary</PageTitle>

<MudPaper Elevation="25">
    <MudToolBar>
        <MudText Typo="Typo.h6">所有书籍</MudText>
        <MudSpacer/>
        @if (Member.Identity == "Admin")
        {
            <MudIconButton Color="Color.Primary" Icon="@Icons.Material.Rounded.UploadFile" OnClick="UploadFiles"/>
            <MudFileUpload T="IBrowserFile" FilesChanged="UploadFile">
                <ActivatorContent>
                    <MudIconButton Icon="@Icons.Material.Filled.Upload"/>
                </ActivatorContent>
            </MudFileUpload>
            <MudIconButton OnClick="JsonDownload" Icon="@Icons.Material.Filled.CloudDownload"/>
        }
        <MudIconButton Icon="@Icons.Material.Outlined.Add" OnClick="OpenDialogAsync"/>
    </MudToolBar>
    <meter min="0" max="1" id="meter" style="@(IsUpload ? "width:100%" : "display: none;width:100%")" value="0"></meter>
    <MudTable T="BookModel" Hover
              Items="@Books"
              Loading="@(IsLoading)"
              Class="mt-5"
              RowEditCommit="i => Task.Run(() => EditDoneAsync(i))"
              CanCancelEdit="true"
              ReadOnly="@(Member.Identity != "Admin")"
              EditTrigger="TableEditTrigger.EditButton"
              Filter="new Func<BookModel, bool>(FilterFunc)"
              Breakpoint="Breakpoint.Sm"
              RowClass="cursor-pointer">
        <ToolBarContent>
            @if (SearchType == "IsEBook")
            {
                <MudSwitch Label="电子/纸质" @bind-Value="IsEBookSwitch" Color="Color.Primary"/>
            }
            else
            {
                <MudTextField @bind-Value="SearchString" Placeholder="Search" Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0">
                </MudTextField>
            }
            <MudSpacer/>
            <MudSelect @bind-Value="SearchType" Label="选择搜索类型" Placeholder="请选择">
                <MudSelectItem Value="@("书名")">书名</MudSelectItem>
                <MudSelectItem Value="@("标签")">标签</MudSelectItem>
                <MudSelectItem Value="@("IsEBook")">电子/纸质</MudSelectItem>
            </MudSelect>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<BookModel, object>(x=>x.Name)">名称</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<BookModel, object>(x=>x.Category)">标签</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<BookModel, object>(x=>string.IsNullOrEmpty(x.EBookUrl))">
                    是否为电子书
                </MudTableSortLabel>
            </MudTh>
            <MudTh>书籍详情</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="名称">@context.Name</MudTd>
            <MudTd DataLabel="标签">
                @foreach (var s in context.Categories)
                {
                    <MudChip OnClick="@(() => Nav.NavigateTo($"/Category/{s.Name.GetUrl()}"))"
                             Size="Size.Small" Label="true" T="string" Color="Color.Primary">@s.Name</MudChip>
                }
            </MudTd>
            <MudTd DataLabel="是否为电子书">@(string.IsNullOrEmpty(context.EBookUrl) ? "纸质书" : "电子书")</MudTd>
            <MudTd DataLabel="书籍详情">
                <MudButton OnClick="@(() => Nav.NavigateTo($"/Book/{context.Id}"))"
                           StartIcon="@Icons.Material.Filled.OpenInNew">书籍详情
                </MudButton>
            </MudTd>
        </RowTemplate>
        <RowEditingTemplate>
            <MudTd DataLabel="名称">
                <MudTextField @bind-Value="context.Name" Required/>
            </MudTd>
            <MudTd DataLabel="标签">
                <MudTextField @bind-Value="context.Category" Required/>
            </MudTd>
            <MudTd DataLabel="是否为电子书">
                <MudTextField @bind-Value="context.EBookUrl"/>
            </MudTd>
            <MudTd DataLabel="书籍详情">
                <MudButton OnClick="@(() => Nav.NavigateTo($"/Book/{context.Id}"))"
                           StartIcon="@Icons.Material.Filled.OpenInNew">书籍详情
                </MudButton>
            </MudTd>
        </RowEditingTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new[] { 10, 25, int.MaxValue }"
                           RowsPerPageString="每页行数："
                           InfoFormat="{first_item}-{last_item}, 共{all_items}本书"
                           AllItemsText="全部"
                           HorizontalAlignment="@HorizontalAlignment.Center"/>
        </PagerContent>
    </MudTable>
</MudPaper>

@code {

    [CascadingParameter(Name = "Member")]
    [NotNull]
    public UserModel? Member { get; set; }

    private List<BookModel> Books { get; set; } = [];
    private string SearchString { get; set; } = "";
    private string SearchType { get; set; } = "书名";
    public bool IsEBookSwitch { get; set; } = true;
    [Parameter] public string Key { get; set; } = "";
    private bool IsUpload { get; set; }
    private bool IsLoading { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        IsLoading = true;
        if (Books.Count != 0)
        {
            IsLoading = false;
            return;
        }

        var response = await httpClient.GetAsync($"{DataStatic.BaseUrl}/Book");
        var json = await response.Content.ReadAsStringAsync();
        json = GZipServer.DecompressString(json);
        Books = JsonSerializer.Deserialize<List<BookModel>>(json) ?? [];
        IsLoading = false;
    }

    private bool FilterFunc(BookModel element)
    {
        if (string.IsNullOrWhiteSpace(SearchString) && SearchType != "IsEBook") return true;
        return SearchType switch
        {
            "书名" => element.Name.Contains(SearchString, StringComparison.CurrentCultureIgnoreCase),
            "标签" => element.Category.Contains(SearchString, StringComparison.CurrentCultureIgnoreCase),
            "IsEBook" => !string.IsNullOrEmpty(element.EBookUrl) == IsEBookSwitch,
            _ => false
        };
    }

    private async Task EditDoneAsync(object? obj)
    {
        if (obj is not BookModel book) return;
        var jwt = (JwtProvider)authStateProvider;
        var cookie = await jwt.GetCookie();
        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", cookie);
        var response = await httpClient.PostAsJsonAsync($"{DataStatic.BaseUrl}/Book", book);
        if (response.IsSuccessStatusCode)
        {
            var newBook = await response.Content.ReadFromJsonAsync<BookModel>();
            if (newBook is null) return;
            Snackbar.Add("更改书籍成功", Severity.Success);
        }
        else
        {
            Snackbar.Add("更改失败", Severity.Error);
        }
    }

    private async Task OpenDialogAsync()
    {
        var options = new DialogOptions() { BackgroundClass = "my-dialog-class" };
        var a = await DialogService.ShowAsync<AddBookDialog>("添加书籍", options);
        var result = await a.Result;

        if (result is { Canceled: false })
        {
            if (result.Data is not BookModel book) return;
            IsUpload = !string.IsNullOrEmpty(book.EBookUrl);
            var jwt = (JwtProvider)authStateProvider;
            var cookie = await jwt.GetCookie();
            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", cookie);
            var response = await httpClient.PostAsJsonAsync($"{DataStatic.BaseUrl}/Book", book);
            if (response.IsSuccessStatusCode)
            {
                var newBook = await response.Content.ReadFromJsonAsync<BookModel>();
                if (newBook is null) return;
                Snackbar.Add("添加书籍成功", Severity.Success);
                Books.Add(newBook);
            }
            else
            {
                Snackbar.Add("添加失败", Severity.Error);
            }
        }
    }

    private async Task UploadFile(IBrowserFile? arg)
    {
        if (arg == null) return;
        var jwt = (JwtProvider)authStateProvider;
        var cookie = await jwt.GetCookie();

        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", cookie);

        var reader = await new StreamReader(arg.OpenReadStream()).ReadToEndAsync();
        reader = GZipServer.CompressString(reader);

        var response = await httpClient.PostAsJsonAsync($"{DataStatic.BaseUrl}/AddBooks", reader);

        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add("添加书籍成功", Severity.Success);
        }
        else
        {
            Snackbar.Add("添加失败", Severity.Error);
        }
    }

    private async Task JsonDownload()
    {
        var options = new JsonSerializerOptions
        {
            Encoder = JavaScriptEncoder.Create(UnicodeRanges.All)
        };

        var noCategories = Books.ToArray();
        foreach (var book in noCategories)
        {
            book.Categories = [];
        }

        var jsonString = JsonSerializer.Serialize(noCategories, options);
        var data = Encoding.UTF8.GetBytes(jsonString);

        await JS.InvokeVoidAsync("jsSaveAsFile", "所有图书.json", Convert.ToBase64String(data));
    }

    private async Task UploadFiles()
    {
        var options = new DialogOptions() { BackgroundClass = "my-dialog-class" };
        var a = await DialogService.ShowAsync<AddBooksFromFile>("添加书籍", options);
        var result = await a.Result;

        if (result is { Canceled: false })
        {
            if (result.Data is not string[] data) return;
            IsUpload = true;
            var jwt = (JwtProvider)authStateProvider;
            var cookie = await jwt.GetCookie();
            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", cookie);
            foreach (var s in data)
            {
                var name = Path.GetFileNameWithoutExtension(s);
                var book = new BookModel() { Name = name, EBookUrl = $"ilib/{s}", Description = name, Category = name };
                var response = await httpClient.PostAsJsonAsync($"{DataStatic.BaseUrl}/Book", book);
                if (!response.IsSuccessStatusCode) continue;
                var newBook = await response.Content.ReadFromJsonAsync<BookModel>();
                if (newBook is null) return;
                Snackbar.Add("添加书籍成功", Severity.Success);
                Books.Add(newBook);
            }
        }
    }

}