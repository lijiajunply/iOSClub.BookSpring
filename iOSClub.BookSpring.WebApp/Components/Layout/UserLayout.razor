@using System.Security.Claims
@using global::BookSpring.DataLib
@using global::BookSpring.DataLib.DataModels
@using Microsoft.EntityFrameworkCore
@inherits LayoutComponentBase
@layout MainLayout
@inject IDbContextFactory<BookContext> DbFactory
@inject AuthenticationStateProvider authStateProvider

<div class="page">
    <div class="sidebar">
        <NavMenu/>
    </div>

    <main>
        <div class="top-row px-4">
            <a href="https://learn.microsoft.com/aspnet/core/" target="_blank">About</a>
        </div>

        <article class="content px-4">
            <CascadingValue Value="User">
                @Body
            </CascadingValue>
        </article>
    </main>
</div>

@code
{
    public UserModel User { get; set; } = new();
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            await base.OnAfterRenderAsync(firstRender);
            return;
        }
        var authState = await authStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            var name = user.Claims.FirstOrDefault(x => x.Type == ClaimTypes.Name)?.Value;
            var identity = user.Claims.FirstOrDefault(x => x.Type == ClaimTypes.Role)?.Value;
            var id = user.Claims.FirstOrDefault(x => x.Type == ClaimTypes.NameIdentifier)?.Value;
            if (string.IsNullOrEmpty(name) || string.IsNullOrEmpty(identity) || string.IsNullOrEmpty(id)) return;
            await using var context = await DbFactory.CreateDbContextAsync();
            var model = await context.Users.FirstOrDefaultAsync(x => x.Name == name && x.Id == id);
            
            if (model is not null)
            {
                User = model;
            }

            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }
}
